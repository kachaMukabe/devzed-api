import { typeDefs } from './graphql-schema'
import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import neo4j from 'neo4j-driver'
import { Neo4jGraphQL } from '@neo4j/graphql'
import { OGM } from '@neo4j/graphql-ogm'
import dotenv from 'dotenv'

import jwt from 'jsonwebtoken'
import { compareSync, hashSync } from 'bcrypt'

// set environment variables from .env
dotenv.config()

const app = express()

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'neo4j'
  ),
	{
		encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',
	}
)


const ogm = new OGM({
	typeDefs,
	driver,
})

const Developer = ogm.model('Developer')


const resolvers = {
	Query: {
		currentUser(obj, args, context, info){
			return context.auth.jwt
		}
	},
	Mutation: {
		signup: (obj, args, context, info) => {
			args.password = hashSync(args.password, 10)

			const session = context.driver.session()

			return session
				.run(
					`
					CREATE (d:Developer) SET d += $args, d.developerId = randomUUID()
					return d
					`,
					{args}
				).then((res) => {
					session.close()
					const {developerId, email } = res.records[0].get('d').properties

					return {
						token: jwt.sign({developerId, email }, process.env.JWT_SECRET, {
							expiresIn: '10d',
						}),
					}
				})
		},

		login: async (obj, {email, password}) => {
			const [developer] = await Developer.find({where: {email: email}})

			const {developerId} = developer 
			if (!compareSync(password, developer.password)) {
				throw new Error("Authorization Error")
			}

			return {
				token: jwt.sign(
				{developerId, email},
				process.env.JWT_SECRET,
				{
					expiresIn: '10d',
				}
				)
			}
		},
	},
}

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Read more in the docs:
 * https://neo4j.com/docs/graphql-manual/current/
 */

const neoSchema = new Neo4jGraphQL({ typeDefs, resolvers, driver, config: {
	jwt: {
		secret: process.env.JWT_SECRET,
	},
}, })

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  //context: {
    //driver,
    //driverConfig: { database: process.env.NEO4J_DATABASE || 'neo4j' },
  //},
	context: ({req}) => {
		return {
			req,
			driver
		}
	},
  schema: neoSchema.schema,
  introspection: true,
  playground: true,
})

// Specify host, port and path for GraphQL endpoint
const port = process.env.GRAPHQL_SERVER_PORT || 4001
const path = process.env.GRAPHQL_SERVER_PATH || '/graphql'
const host = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0'

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path })

app.listen({ host, port, path }, () => {
  console.log(`GraphQL server ready at http://${host}:${port}${path}`)
})
